{% extends 'base-front.html.twig' %}

{% block title %}Commande!{% endblock %}

{% block content %}
<style>
.shop{
    font-size: 10px;
}

.space{
    letter-spacing: 0.8px !important;
}

.second a:hover {
    color: rgb(92, 92, 92) ;
}

.active-2 {
    color: rgb(92, 92, 92) 
}

.breadcrumb>li+li:before {
    content: "" !important
}

.breadcrumb {
    padding: 0px;
    font-size: 10px;
    color: #aaa !important;
}

.first {
    background-color: white ;
}

a {
    text-decoration: none !important;
    color: #aaa ;
}

.btn-lg,.form-control-sm:focus,
.form-control-sm:active,
a:focus,a:active {
    outline: none !important;
    box-shadow: none !important
}

.form-control-sm:focus{
    border:1.5px solid #4bb8a9 ; 
}

.btn-group-lg>.btn, .btn-lg {
    padding: .5rem 0.1rem;
    font-size: 1rem;
    border-radius: 0;
    color: white !important;
    background-color: #4bb8a9;
    height: 2.8rem !important;
    border-radius: 0.2rem !important;
}

.btn-group-lg>.btn:hover, .btn-lg:hover {
    background-color: #26A69A;
}

.btn-outline-primary{
    background-color: #fff !important;
    color:#4bb8a9 !important;
    border-radius: 0.2rem !important;   
    border:1px solid #4bb8a9;
}

.btn-outline-primary:hover{
    background-color:#4bb8a9  !important;
    color:#fff !important;
    border:1px solid #4bb8a9;
}

.card-2{
    margin-top: 40px !important;
}

.card-header{
    background-color: #fff;
    border-bottom:0px solid #aaaa !important;
}

p{
    font-size: 13px ;
}
        
.small{
    font-size: 9px !important;
}

.form-control-sm {
    height: calc(2.2em + .5rem + 2px);
    font-size: .875rem;
    line-height: 1.5;
    border-radius: 0;   
}

.cursor-pointer{
    cursor: pointer;
}

.boxed {
    padding: 0px 8px 0 8px ;
    background-color: #4bb8a9;
    color: white;
}

.boxed-1{
    padding: 0px 8px 0 8px ;
    color: black !important;
    border: 1px solid #aaaa;
}

.bell{
    opacity: 0.5;
    cursor: pointer;
}

@media (max-width: 767px) {
    .breadcrumb-item+.breadcrumb-item {
        padding-left: 0
    }
}

/* Chatbot styles - Version améliorée */
#chatbot-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    width: 350px;
    z-index: 1000;
    font-family: 'Arial', sans-serif;
    transition: all 0.3s ease;
}

#chatbot-header {
    background-color: #4bb8a9;
    color: white;
    padding: 12px 15px;
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

#chatbot-header h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
}

#chatbot-toggle {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
}

#chatbot {
    background: white;
    border: 1px solid #e0e0e0;
    border-top: none;
    border-bottom-left-radius: 8px;
    border-bottom-right-radius: 8px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    display: none;
    flex-direction: column;
    height: 400px;
}

#chatbot.active {
    display: flex;
}

#messages {
    flex-grow: 1;
    padding: 15px;
    overflow-y: auto;
    background-color: #f9f9f9;
}

.message {
    margin-bottom: 12px;
    max-width: 80%;
    padding: 10px 15px;
    border-radius: 18px;
    line-height: 1.4;
    font-size: 14px;
    position: relative;
}

.user-message {
    background-color: #4bb8a9;
    color: white;
    margin-left: auto;
    border-bottom-right-radius: 5px;
}

.bot-message {
    background-color: #e0e0e0;
    color: #333;
    margin-right: auto;
    border-bottom-left-radius: 5px;
}

#chatbot-input {
    display: flex;
    padding: 10px;
    background: white;
    border-top: 1px solid #e0e0e0;
}

#user-input {
    flex-grow: 1;
    padding: 10px 15px;
    border: 1px solid #e0e0e0;
    border-radius: 20px;
    outline: none;
    font-size: 14px;
    transition: border 0.3s;
}

#user-input:focus {
    border-color: #4bb8a9;
}

#send-button {
    background-color: #4bb8a9;
    color: white;
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    margin-left: 10px;
    cursor: pointer;
    transition: background-color 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
}

#send-button:hover {
    background-color: #26A69A;
}

#send-button i {
    font-size: 16px;
}

/* Animation pour les nouveaux messages */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(5px); }
    to { opacity: 1; transform: translateY(0); }
}

.message {
    animation: fadeIn 0.3s ease-out;
}

/* Style pour le statut "typing..." */
.typing-indicator {
    display: inline-block;
    padding: 10px 15px;
    background-color: #e0e0e0;
    border-radius: 18px;
    color: #333;
    font-style: italic;
    margin-bottom: 12px;
    border-bottom-left-radius: 5px;
}

.typing-dots {
    display: inline-flex;
}
.typing-dots span {
    height: 7px;
    width: 7px;
    margin: 0 2px;
    background-color: #777;
    border-radius: 50%;
    display: inline-block;
    opacity: 0.4;
}

.typing-dots span:nth-child(1) {
    animation: typingAnimation 1s infinite;
}
.typing-dots span:nth-child(2) {
    animation: typingAnimation 1s infinite 0.2s;
}
.typing-dots span:nth-child(3) {
    animation: typingAnimation 1s infinite 0.4s;
}

@keyframes typingAnimation {
    0% { opacity: 0.4; transform: translateY(0); }
    50% { opacity: 1; transform: translateY(-3px); }
    100% { opacity: 0.4; transform: translateY(0); }
}
</style>
	

	<div class=" container-fluid my-5 ">
    <div class="row justify-content-center ">
        <div class="col-xl-10">
            <div class="card shadow-lg ">
               
                <div class="row  mx-auto justify-content-center text-center">
                    <div class="col-12 mt-3 ">
                        <nav aria-label="breadcrumb" class="second ">
                            <ol class="breadcrumb indigo lighten-6 first  ">
                                <li class="breadcrumb-item font-weight-bold "><a class="black-text text-uppercase " href="{{path('app_products')}}"><span class="mr-md-3 mr-1">Produits</span></a><i class="fa fa-angle-double-right " aria-hidden="true"></i></li>
                                <li class="breadcrumb-item font-weight-bold"><a class="black-text text-uppercase" href="{{path('app_panier')}}"><span class="mr-md-3 mr-1">Panier</span></a><i class="fa fa-angle-double-right text-uppercase " aria-hidden="true"></i></li>
                                <li class="breadcrumb-item font-weight-bold"><a class="black-text text-uppercase active-2" href="#"><span class="mr-md-3 mr-1">Recap</span></a></li>
                            </ol>
                        </nav>
                    </div>
                </div>
            
                <div class="row justify-content-around">
                    <div class="col-md-5">
                        <div class="card border-0">
                            <div class="card-header pb-0">
                                <h2 class="card-title space ">Checkout</h2>
                                <p class="card-text text-muted mt-4  space">SHIPPING DETAILS</p>
                                <hr class="my-0">
                            </div>
                            <div class="card-body">
                                {{form_start(form,{action:path('app_order_recap')})}}
                               {{form_end(form)}}
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="card border-0 ">
                            <div class="card-header card-2">
                                <p class="card-text text-muted mt-md-4  mb-2 space">YOUR ORDER <span class=" small text-muted ml-2 cursor-pointer">EDIT SHOPPING BAG</span> </p>
                                <hr class="my-2">
                            </div>
                          {# ... (le reste du code reste inchangé jusqu'à la partie des produits) ... #}

<div class="card-body pt-0">
    {% for item in cartProducts %}
        <div class="row justify-content-between">
            <div class="col-auto col-md-7">
                <div class="media flex-column flex-sm-row">
                    <div class="media-body my-auto">
                        <div class="row">
                            <div class="col-auto">
                                <p class="mb-0"><b>{{ item.product.nomProduit }}</b></p>
                                <small class="text-muted">{{ item.product.categorie.nomcategorie }}</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pl-0 flex-sm-col col-auto my-auto">
                <p class="boxed-1">{{ item.quantity }}</p>
            </div>
            <div class="pl-0 flex-sm-col col-auto my-auto">
                <p><b>{{ (item.product.prix * item.quantity / 100)|number_format(2, ',', '.') }} TND</b></p>
            </div>
        </div>
        <hr class="my-2">
    {% endfor %}
</div>

{# ... (le reste du code reste inchangé) ... #}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Chatbot HTML amélioré -->
<div id="chatbot-container">
    <div id="chatbot-header" onclick="toggleChatbot()">
        <h3>Assistant de commande</h3>
        <button id="chatbot-toggle">▼</button>
    </div>
    <div id="chatbot">
        <div id="messages"></div>
        <div id="chatbot-input">
            <input type="text" id="user-input" placeholder="Tapez votre message..." autocomplete="off">
            <button id="send-button" onclick="sendMessage()">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

<script>
// Éléments du DOM
const messagesDiv = document.getElementById('messages');
const userInput = document.getElementById('user-input');
const chatbot = document.getElementById('chatbot');
const chatbotHeader = document.getElementById('chatbot-header');
const chatbotToggle = document.getElementById('chatbot-toggle');

// Afficher/masquer le chatbot
function toggleChatbot() {
    chatbot.classList.toggle('active');
    chatbotToggle.textContent = chatbot.classList.contains('active') ? '▼' : '▲';
}

// Ouvrir le chatbot par défaut
toggleChatbot();

// Ajouter un message dans le chat
function addMessage(sender, message, isBot = false) {
    const messageClass = isBot ? 'bot-message' : 'user-message';
    messagesDiv.innerHTML += `<div class="message ${messageClass}">${message}</div>`;
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Afficher l'indicateur "typing..."
function showTypingIndicator() {
    const typingHtml = `
        <div class="typing-indicator">
            <span>Assistant en train d'écrire</span>
            <div class="typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    `;
    messagesDiv.innerHTML += typingHtml;
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Supprimer l'indicateur "typing..."
function removeTypingIndicator() {
    const typingIndicator = document.querySelector('.typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// Envoyer un message
async function sendMessage() {
    const message = userInput.value.trim();
    
    if (!message) return;
    
    addMessage('Vous', message);
    userInput.value = '';
    showTypingIndicator();
    
    try {
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message })
        });
        const data = await response.json();
        removeTypingIndicator();
        addMessage('Assistant', data.response, true);
    } catch (error) {
        removeTypingIndicator();
        addMessage('Système', 'Désolé, une erreur est survenue. Veuillez réessayer plus tard.', true);
    }
}

// Envoyer avec la touche Entrée
userInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// Message de bienvenue initial
window.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        addMessage('Assistant', 'Bonjour ! Comment puis-je vous aider avec votre commande aujourd\'hui ?', true);
    }, 500);
});
</script>

<!-- Font Awesome pour l'icône d'envoi -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

{% endblock %}