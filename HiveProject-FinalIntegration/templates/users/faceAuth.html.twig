{# templates/face_auth/capture.html.twig #}

{% extends 'base.html.twig' %}

{% block styles %}
<style>
    #camera-container {
        max-width: 600px;
        margin: 0 auto;
        text-align: center;
    }
    #camera-view {
        width: 100%;
        background: #333;
        margin-bottom: 15px;
    }
    #capture-btn {
        padding: 10px 20px;
        background: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    #result-message {
        margin-top: 15px;
        padding: 10px;
        border-radius: 4px;
        display: none;
    }
    .success {
        background: #d4edda;
        color: #155724;
    }
    .error {
        background: #f8d7da;
        color: #721c24;
    }
</style>
{% endblock %}

{% block body %}
<div class="container">
    <div id="camera-container">
        <h2>Authentification Faciale Admin</h2>
        
        <video id="camera-view" autoplay playsinline></video>
        <button id="capture-btn" class="btn btn-primary">Capturer et Vérifier</button>
        
        <div id="result-message"></div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('camera-view');
    const captureBtn = document.getElementById('capture-btn');
    const resultMessage = document.getElementById('result-message');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // Accéder à la caméra
    navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
            video.srcObject = stream;
        })
        .catch(err => {
            console.error("Erreur d'accès à la caméra:", err);
            resultMessage.textContent = "Erreur: Impossible d'accéder à la caméra";
            resultMessage.className = "error";
            resultMessage.style.display = "block";
        });
    
    // Capturer l'image
    captureBtn.addEventListener('click', function() {
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        // Afficher un message de chargement
        resultMessage.textContent = "Vérification en cours...";
        resultMessage.className = "";
        resultMessage.style.display = "block";
        
        // Convertir en blob et envoyer
        canvas.toBlob(blob => {
            const formData = new FormData();
            formData.append('face_image', blob, 'capture.jpg');
            
            fetch('{{ path("admin_face_auth") }}', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    resultMessage.textContent = "Authentification réussie! Redirection...";
                    resultMessage.className = "success";
                    
                    if (data.redirect) {
                        window.location.href = data.redirect;
                    }
                } else {
                    resultMessage.textContent = data.message || "Échec de l'authentification";
                    resultMessage.className = "error";
                }
            })
            .catch(error => {
                resultMessage.textContent = "Erreur lors de la vérification";
                resultMessage.className = "error";
                console.error('Error:', error);
            });
        }, 'image/jpeg', 0.9);
    });
});
</script>
{% endblock %}